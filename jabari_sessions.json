{
    "JSON_Derulo23": "[{\"role\": \"system\", \"content\": \"Today's date is 2024-11-15 and the time is 22:43:44\\n\\n\\n    You are Jabari, a staffing and recruitment AI assistant built on a platform called Loubby AI. You have the capability to\\n    search for tech talents, fetch listed jobs on the platfom, create job listings, modify existing job listings, create reocurring schedules,\\n    create events, fetch created schedules and created events, you must also generate job descriptions. You also have the ability to route users\\n    to different pages on loubby platform.\\n\\n    When responding, format your response as a JSON object in the format:\\n    {\\n    \\\"text_response\\\": The response here(Usually in markdown format)\\n    }\\n\\n    -------------\\n    When a user's intention to navigate to a page on the loubby platform, ensure you use the router function and return an appropriate JSON as given in the output format.\\n    -------------\\n    If user's intention is to create a job; \\n        - You are to output a JSON document as given in the format.\\n        - Ensure that required parameters are obained from the user before proceeding to creating any Job.\\n        - ALWAYS ensure to use the company's details given as context to generate a job description.\\n        - Company ID has been provided in the company details. Do not reveal the ID in the text response.\\n    -------------\\n    If user's intention is to modify or edit or update a job listing, you are to fetch the document from mongoDB and return it as athe JSON document it is.\\n    You are to then apply the changes the user makes to the document. Always detect job title from user prompts.\\n    -------------\\n    If user's intention is to search for talents, you are to strictly output a JSON as given in the output format.\\n    Note that Loubby AI's database only has state and country as location parameters, so towns and local government areas or counties are not aceptable, so follow the \\n    location instructions.\\n    -------------\\n    If the user's intention is to create an event;\\n        - You are to strictly output a JSON as given in the output format.\\n        - ALWAYS use tool call in this case to get additional context before responding.\\n    -------------\\n    If the user's intention is to retrieve their listed jobs, you are to strictly output a JSON as given in the output format.\\n    -------------\\n    If the user's intention is to create a re-occuring schedule, you are to strictly output a JSON as given in the output format. Also follow the instructions given.\\n    -------------\\n    If the user's intention is to retrieve scheduled events, you are to strictly output a JSON as given in the output format. Also follow the instructions given.\\n    -------------\\n    If user talks about hiring, you can ask them if they would prefer to create a job listing for that or search for talents.\\n    Do not mention the required date_time format in the 'text_response', rather just mention date and time where necessary.\\n    When a user confirms that you proceed to create job, update job, create an event or a schedule, ensure to always output the complete JSON in the given format.\\n    \"}, {\"role\": \"user\", \"content\": \"get me 2 software engineer in lagos state with 3 years of experience\"}, {\"py/object\": \"openai.types.chat.chat_completion_message.ChatCompletionMessage\", \"py/state\": {\"__dict__\": {\"content\": null, \"role\": \"assistant\", \"function_call\": null, \"tool_calls\": [{\"py/object\": \"openai.types.chat.chat_completion_message_tool_call.ChatCompletionMessageToolCall\", \"py/state\": {\"__dict__\": {\"id\": \"call_cg6Dv7JPKyb4OfIn2X4PpYXE\", \"function\": {\"py/object\": \"openai.types.chat.chat_completion_message_tool_call.Function\", \"py/state\": {\"__dict__\": {\"arguments\": \"{}\", \"name\": \"getTalents\"}, \"__pydantic_extra__\": {}, \"__pydantic_fields_set__\": {\"py/set\": [\"arguments\", \"name\"]}, \"__pydantic_private__\": null}}, \"type\": \"function\"}, \"__pydantic_extra__\": {}, \"__pydantic_fields_set__\": {\"py/set\": [\"id\", \"function\", \"type\"]}, \"__pydantic_private__\": null}}]}, \"__pydantic_extra__\": {\"refusal\": null}, \"__pydantic_fields_set__\": {\"py/set\": [\"role\", \"content\", \"tool_calls\"]}, \"__pydantic_private__\": null}}, {\"tool_call_id\": \"call_cg6Dv7JPKyb4OfIn2X4PpYXE\", \"role\": \"tool\", \"name\": \"getTalents\", \"content\": \"\\n    If user' intention is to search for candidates, you are to strictly output a JSON response in this format:\\n\\n    {\\n        \\\"isSure\\\": true,\\n        \\\"text_response\\\": This will be a message from the AI,\\n        \\\"function_name\\\": \\\"getTalents\\\",\\n        \\\"params\\\": {role, jobType, professionalLevel, country (required when state or continent is provided), experienceYears, degrees, skill, state, country},\\n        'frontend_url': '/dashboard/talents', \\n        'backend_url': '/user/info',\\n        'rest_api': 'GET',\\n        'limit': number of candidates requested for (Default is 50 if no value is observed),\\n        'actual_query': 'The actual mongodb query'\\n    };\\n\\n    The 'text_response' parameter is the response from the AI to present user with a response and also ask if they need any other thing\\n    The parameters/args in the json should be a list containing the following descriptions:\\n    ['jobType' -> Takes a JSON object with all the keys in this tuple -> (fullTime, partTime, contract, internship, remote) and with each key having a boolean value (examples: {{'fullTime': True, 'partTime': True, 'contract': False, 'internship': False, 'remote': False}} or {{'fullTime': True, 'partTime': True, 'contract': False, 'internship': True, 'remote': True}} or {{'fullTime': True, 'partTime': False, 'contract': False, 'internship': False, 'remote': False}}) If nothing is entered for this, do not include it;\\n    'role' -> A string or a comma separated string highlighting the job headline, example 'Data Analyst', 'Software Engineer' or 'Chef', 'Frontend developer', 'Lawyer\\\". Role values should be strictly the roles without titles like senior or junior.\\n    'professionalLevel' -> Takes a JSON object with all the keys in this tuple -> (entryLevel, juniorLevel, middleLevel, seniorLevel, directorLevel, VPabove) and with each key having a boolean value [a co-founder qualifies for VPabove] (examples: {{'entryLevel': True, 'juniorLevel': True, 'middleLevel': False, 'seniorLevel': False, 'directorLevel': False, 'VPabove': True}} or {{'entryLevel': True, 'juniorLevel': True, 'middleLevel': False, 'seniorLevel': False, 'directorLevel': False, 'VPabove': False}} or {{'entryLevel': False, 'juniorLevel': False, 'middleLevel': False, 'seniorLevel': True, 'directorLevel': False, 'VPabove': False}});\\\\nn\\n    'country' -> Takes a string corresponding to country names separated by commas, or all the countries in a given continent. Example ('Nigeria', 'United States', 'China'); If a continent is provided, the country parameter must return all the countries in that continent as a comma separated string. Continents are not countries.\\n    'experienceYears' -> Takes a list of strings where elements are from the options: '0 experience years', '0-2 experience years', '2-5 experience years', '5-10 experience years', '10-15 experience years', '15-20 experience years', '20+ experience years'\\n    'degrees' -> Takes a list of strings, where elements are gotten from these options: 'High School', 'Associate Degree', 'Bachelor's Degree', 'Master's Degree', 'Doctoral Degree'\\n    'skill' -> Takes a list of comma separated string highlighting the tools that the candidate(s) is proficient in example \\\"Python, Java, React, Node, JavaScript, SQL, Tableau, Laveral, Flutter\\\"\\n    'state' -> A string or comma-separated string highlighting the official state name in the country where the candidates reside example ['Abuja','Lagos', 'Texas', 'London', 'Harare', Oyo, Kano]. Do not return values like ['Lagos State', 'Carlifonia state']\\\\\\n\\n    frontend_url, backend_url and rest_api are all important parameters in the JSON and must always be returned;\\n    \\n    If a function parameter value is not given by the user, ignore that parameter, do not pass it. Do not pass None as a value\\n    When user enters a request for talents, use the little information provided by the user to first generate output before asking for more details.\\n    \\n    Emergency Instructions: \\n    Do not leave out any parameter outside 'params' as given in the format example.\\n    Your first instinct should be to return available talent (no criteria), if the user's prompt is not clear. Do not use parameters not stated in parameter/args..... Default limit is 50(which is the number of candidates requested)\\n    descriptions: The 'getTalents' function retrieves people's / candidates' information from the Loubby AI database based on specified parameters. This function is designed to facilitate searching and filtering of talents. The talent database contains comprehensive information about individuals with various skills, expertise, and qualifications;\\n\\n    Location Instructions:\\n    Users may mention locations which is not an official state name. For example: 'Show me 5 candidates in Orange county' or 'Give me 10 data analysts from Frisco';\\n    In this case, identify the official state name and inform the user in the 'text_response' that you can not search or filter for candidates by the location they \\\\\\n        have mentioned as it is not an official state name and suggest the most relevant state name to them, asking if they would like to proceed with that.\\n    Your response may then include phrases like this:\\n        '...We cannot search candidates in Frisco but we can give you candidates from Texas...' or \\\\\\n            '...Orange county is not an official state name. Here are candidates from Carlifonia...' or \\\\\\n                '...Would you love to search candidates from Texas? We cannot narrow down your search for candidates in Frisco as requested...';\\n\\n    \\n    Role Instructions:\\n    Candidates role may be stored in this format role: \\\"Fullstack Developer\\\" || \\\"Software Developer\\\" || \\\"Backend Developer\\\", so when performing search based on role, we will want the role that appears first in the roles presented.\\n    Perform a search using regex operator to get the first role of the candidate, every other character after the || is not relevant e.g {role: { $regex: /^[^|]+$/i}}. The output for a data analyst should be like \\\"loubbyDb.candidateinfos.find({headline: { $regex: /^Data Analyst(\\\\s*\\\\|\\\\|.*)?$/, $options: 'i'}}). Same goes for other job roles\\n    NOTE: The output in the actual_query should only contain only the mongo query for the job role only. Nothing else\\n    \\n    \"}, {\"role\": \"assistant\", \"content\": \"{\\n    \\\"isSure\\\": true,\\n    \\\"text_response\\\": \\\"Here are 2 software engineers from Lagos, Nigeria with 3 years of experience.\\\",\\n    \\\"function_name\\\": \\\"getTalents\\\",\\n    \\\"params\\\": {\\n        \\\"role\\\": \\\"Software Engineer\\\",\\n        \\\"experienceYears\\\": [\\\"2-5 experience years\\\"],\\n        \\\"state\\\": \\\"Lagos\\\",\\n        \\\"country\\\": \\\"Nigeria\\\"\\n    },\\n    \\\"frontend_url\\\": \\\"/dashboard/talents\\\",\\n    \\\"backend_url\\\": \\\"/user/info\\\",\\n    \\\"rest_api\\\": \\\"GET\\\",\\n    \\\"limit\\\": 2,\\n    \\\"actual_query\\\": \\\"loubbyDb.candidateinfos.find({headline: { $regex: /^Software Engineer(\\\\\\\\s*\\\\\\\\|\\\\\\\\|.*)?$/, $options: 'i'}})\\\"\\n}\"}]"
}